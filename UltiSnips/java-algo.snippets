# Snippet for Algorithms

global !p
def junit(snip):
	if snip.opt("g:ultisnips_java_junit", "") == "3":
		snip += ""
	else:
		snip.rv += "@Test\n\t"

def nl(snip):
	if snip.opt("g:ultisnips_java_brace_style", "") == "nl":
		snip += ""
	else:
		snip.rv += " "
def getArgs(group):
	import re
	word = re.compile('[a-zA-Z0-9><.]+ \w+')
	return [i.split(" ") for i in word.findall(group) ]

def camel(word):
	if not word: return ''
	return word[0].upper() + word[1:]

def mixedCase(word):
	if not word: return ''
	return word[0].lower() + word[1:]

endglobal

snippet algo "A skeleton of algorithm program" b
import java.io.*;
import java.util.*;

public class ${1:`!p snip.rv = snip.basename or "untitled"`} {
	public static void main(String[] args)`!p nl(snip)`{
		Scanner in = new Scanner(System.in);
		$0
	}
}
endsnippet

snippet algob "A skeleton of algorithm program(using BufferedReader)" b
import java.io.*;
import java.util.*;

public class ${1:`!p snip.rv = snip.basename or "untitled"`} {
	public static void main(String[] args) throws IOException`!p nl(snip)`{
		BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
		String[] str;
		$0
	}
}
endsnippet

snippet algog "A skeleton of algorithm program for GCJ" b
import java.io.*;
import java.util.*;

public class ${1:`!p snip.rv = snip.basename or "untitled"`} {
	public static void main(String[] args)`!p nl(snip)`{
		Scanner in = new Scanner(System.in);
		int T = in.nextInt();
		for (int t = 0; t < T; t++) {
			$0
			System.out.printf("Case #%d:${2:\n}", t + 1);
		}
	}
}
endsnippet



snippet in1 "Input an int with Scanner" b
int ${1:N} = in.nextInt();
endsnippet

snippet in2 "Input two ints with Scanner" b
int ${1:M} = in.nextInt(), ${2:N} = in.nextInt();
endsnippet

snippet in3 "Input three ints with Scanner" b
int ${1:M} = in.nextInt(), ${2:N} = in.nextInt(), ${3:L} = in.nextInt();
endsnippet

snippet bin1 "Input an int with BufferedReader" b
str = in.readLine().split(" ");
int ${1:N} = Integer.parseInt(str[0]);
endsnippet

snippet bin2 "Input two ints with BufferedReader" b
str = in.readLine().split(" ");
int ${1:M} = Integer.parseInt(str[0]), ${2:N} = Integer.parseInt(str[1]);
endsnippet

snippet bin3 "Input three ints with BufferedReader" b
str = in.readLine().split(" ");
int ${1:M} = Integer.parseInt(str[0]), ${2:N} = Integer.parseInt(str[1]), ${3:L} = Integer.parseInt(str[2]);
endsnippet

snippet ffor "Two nested for loops" b
for (int ${1:i} = 0; $1 < ${2:M}; $1++) {
	for (int ${3:j} = 0; $3 < ${4:N}; $3++) {
		$0
	}
}
endsnippet

snippet fffor "Three nested for loops" b
for (int ${1:i} = 0; $1 < ${2:M}; $1++) {
	for (int ${3:j} = 0; $3 < ${4:N}; $3++) {
		for (int ${5:k} = 0; $5 < ${6:L}; $5++) {
			$0
		}
	}
}
endsnippet

snippet edge "Class definition of Edge" b
class Edge implements Comparable<Edge> {
	int u;
	int v;
	int cost;

	public Edge(int u, int v, int cost) {
		this.u = u;
		this.v = v;
		this.cost = cost;
	}

	public int compareTo(Edge b) {
		return this.cost - b.cost;
	}
}
endsnippet

snippet uf "Class definition of UnionFind" b
class UnionFind {
	private int[] ids;
	private int[] sizes;

	public UnionFind(int N) { 
		ids = new int[N];
		sizes = new int[N];
		for (int i = 0; i < N; i++) {
			ids[i] = i;
			sizes[i] = 1;
		}
	}

	public int find(int p) {
		while (p != ids[p]) {
			ids[p] = ids[ids[p]];
			p = ids[p];
		}
		return p;
	}

	public void union(int p, int q) {
		p = find(p);
		q = find(q);

		if (p == q) return;

		if (sizes[p] < sizes[q]) {
			ids[p] = q;
			sizes[q] += sizes[p];
		} else {
			ids[q] = p;
			sizes[p] += sizes[q];
		}
	}

	public boolean connected(int p, int q) {
		return find(p) == find(q);
	}
}
endsnippet

snippet prim "Prim algorithom (minimum spanning tree)" b
private static ${1:int} prim(int N, List<List<Edge>> edges) {
	$1 sum = 0;
	boolean[] used = new boolean[N];
	PriorityQueue<Edge> que = new PriorityQueue<Edge>(N);

	used[0] = true;
	que.addAll(edges.get(0));

	while (!que.isEmpty()) {
		Edge e = que.poll();

		if (used[e.v]) continue;

		sum += e.cost;
		used[e.v] = true;

		for (Edge to : edges.get(e.v)) {
			if (used[to.v]) continue;
			que.offer(to);
		}
	}

	return sum;
}
endsnippet

snippet ksk "Kruskal algorithm(minium spanning tree)" b
private static ${1:int} kruskal(int N, Edge[] edges) {
	UnionFind uf = new UnionFind(N);
	Arrays.sort(edges);
	$1 cost = 0;
	for (Edge e : edges) {
		if (uf.connected(e.u, e.v)) continue;
		cost += e.cost;
		uf.union(e.u, e.v);
	}

	return cost;
}
endsnippet

snippet dijk "Dijkstra algorithm(shortest path)" b
private static ${1:int}[] dijkstra(int N, int s, List<List<Edge>> graph) {
	$1[] dist = new $1[N];
	Arrays.fill(dist, `!p snip.rv = 'Integer' if t[1] == 'int' else 'Long'`.MAX_VALUE);
	dist[s] = 0;

	PriorityQueue<Edge> que = new PriorityQueue<Edge>();
	que.offer(new Edge(s, s, 0));

	while (!que.isEmpty()) {
		Edge p = que.poll();
		if (dist[p.u] < p.cost) continue;

		for (Edge e : graph.get(p.u)) {
			if (dist[e.v] > p.cost + e.cost) {
				dist[e.v] = p.cost + e.cost;
				que.offer(new Edge(e.v, s, dist[e.v]));
			}
		}
	}

	return dist;
}
endsnippet

snippet floyd "Floyd-Warshall(shortest path for any pairs of vertex)" b
private static void floydwarshall(int[][] dist) {
	int V = dist.length;
	for (int i = 0; i < V; i++) {
		for (int j = 0; j < V; j++) {
			for (int k = 0; k < V; k++) {
				dist[i][j] = Math.min(dist[i][j], dist[i][k] + dist[k][j]);
			}
		}
	}
}
endsnippet

snippet bford "Bellman-Ford (checking negative circle)" b
private static boolean bellmanford(int N, List<Edge> edges) {
	int[] dist = new int[N];

	Arrays.fill(dist, Integer.MAX_VALUE);
	dist[0] = 0;

	for (int i = 0; i < N; i++) {
		for (Edge e : edges) {
			if (dist[e.u] < Integer.MAX_VALUE && dist[e.v] > dist[e.u] + e.cost) {
				dist[e.v] = dist[e.u] + e.cost;
				if (i == N - 1) {
					return true;
				}
			}
		}
	}
	return false;
}
endsnippet

snippet bit "Binary Indexed Tree" b
class BIT {
	private int[] array;
	public BIT(int N) { 
		array = new int[N + 1];
	}
	public void add(int i, int n) {
		while (i > 0 && i < array.length) {
			array[i] += n;
			i += i & -i;
		}
	}
	public int query(int i) {
		int ret = 0;
		while (i > 0 && i < array.length) {
			ret += array[i]; 
			i -= i & -i;
		}
		return ret;
	}
}
endsnippet

snippet rmq "Range maximum/minimum query(segment tree)" b
class RMQ {
	private int L;
	private ${1:int}[] array;
	public RMQ($1[] a) { 
		L = 1;
		while (L < a.length) L <<= 1;
		array = new $1[L * 2 - 1];
		for (int i = 0; i < array.length; i++) {
			array[i + L - 1] = a[i];
		}
		for (int i = L - 2; i >= 0; i--) {
			array[i] = Math.${2:max}(array[i * 2 + 1], array[i * 2 + 2]);
		}
	}
	public RMQ(int length) {
		L = 1;
		while (L < length) L <<= 1;
		array = new $1[L * 2 - 1];
	}
	public void set(int i, $1 v) {
		set(i, v, 0, 0, L - 1);
	}
	public $1 query(int l, int r) {
		return query(l, r, 0, 0, L - 1);
	}
	private void set(int i, $1 v, int k, int kl, int kr) {
		if (kl <= i && kr >= i) {
			array[k] = Math.$2(array[k], v);
			if (kl >= kr) return;
			int mid = (kl + kr) / 2;
			set(i, v, k * 2 + 1, kl, mid);
			set(i, v, k * 2 + 2, mid + 1, kr);
		}
	}
	private $1 query(int l, int r, int k, int kl, int kr) {
		if (l > kr || r < kl) return Integer.`!p snip.rv = 'MAX_VALUE' if t[1] == 'min' else 'MIN_VALUE'`;
		else if (l <= kl && kr <= r) return array[k];
		else {
			int mid = (kl + kr) / 2;
			return Math.$2(query(l, r, k * 2 + 1, kl, mid), query(l, r, k * 2 + 2, mid + 1, kr));
		}
	}
}
endsnippet

snippet isprime "Check if an Integer is prime" b
private static boolean isPrime(${1:int} N) {
	for($1 i = 2; i * i <= N; i++) {
		if ((N % i) == 0) return false;
	}
	return true;
}
endsnippet

snippet primes "Get all primes < N" b
private static int[] primes(int N) {
	if (N < 2) return new int[0];
	boolean[] isprime = new boolean[N];
	Arrays.fill(isprime, true);
	int count = 1;
	for (int i = 3; i < N; i += 2) {
		if (!isprime[i]) continue;
		for (int j = i; i * j < N; j += 2) isprime[i * j] = false;
		count++;
	}
	int[] res = new int[count];
	int idx = 0;
	res[idx++] = 2;
	for (int i = 3; i < N; i += 2) if (isprime[i]) res[idx++] = i;
	return res;
}
endsnippet

snippet gcd "Get greated common divisor" b
private static ${1:int} gcd($1 a, $1 b) {
	if (b == 0) return a;
	else return gcd(b, a % b);
}
endsnippet

snippet pow "Quick power function for Integers" b
private static ${1:int} pow($1 a, $1 b) {
	$1 r = 1;
	while (b > 0) {
		if ((b & 1) == 1) r *= a;
		a *= a;
		b >>= 1;
	}
	return r;
}
endsnippet

snippet powmod "Quick power function with modulo" b
private static ${1:int} pow($1 a, $1 b, $1 m) {
	$1 r = 1;
	while (b > 0) {
		if ((b & 1) == 1) r = (r * a) % m;
		a = (a * a) % m;
		b >>= 1;
	}
	return r;
}
endsnippet

snippet lowerbound "Find lowerbound of a given value in a sorted array" b
private static int lowerbound(${1:int}[] array, $1 value) {
	int l = 0, r = array.length - 1;
	while (l <= r) {
		int mid = (l + r) / 2;
		if (array[mid] >= value) {
			r = mid - 1;
		} else {
			l = mid + 1;
		}
	}
	return l;
}
endsnippet

snippet upperbound "Find upperbound of a given value in a sorted array" b
private static int upperbound(${1:int}[] array, $1 value) {
	int l = 0, r = array.length - 1;
	while (l <= r) {
		int mid = (l + r) / 2;
		if (array[mid] <= value) {
			l = mid + 1;
		} else {
			r = mid - 1;
		}
	}
	return r;
}
endsnippet

snippet root "Calculate the nth root of number" b
private static double root(double number, double root) {
	return Math.pow(Math.E, Math.log(number) / root);
}
endsnippet

snippet pair "A general pair data structure" b
class ${1:Pair} implements Comparable<$1>{
	$2 $3;
	$2 $4;
	public $1(${2:int} ${3:x}, $2 ${4:y}) {
		this.$3 = $3;
		this.$4 = $4;
	}
	public int hashCode() {
		return `!p snip.rv = "(int)" if t[2] != 'int' else ''`($3 * 10009 + $4);
	}
	public boolean equals(Object obj) {
		if (obj == null) return false;
		if (!(obj instanceof $1)) return false;
		if (obj == this) return true;
		$1 a = this;
		$1 b = ($1)obj;
		return a.$3 == b.$3 && a.$4 == b.$4;
	}
	public int compareTo($1 that) {
		$1 a = this;
		$1 b = that;
		if (a.$3 < b.$3) return -1;
		else if (a.$3 > b.$3) return 1;
		else if (a.$4 < b.$4) return -1;
		else if (a.$4 > b.$4) return 1;
		else return 0;
	}
}
endsnippet

snippet triad "A general triad data structure" b
class ${1:Triad} implements Comparable<$1> {
	${2:int} x;
	$2 y;
	$2 z;
	public $1($2 x, $2 y, $2 z) {
		this.x = x;
		this.y = y;
		this.z = z;
	}
	public int hashCode() {
		return (int)(x * 100003 + y * 10009 + z);
	}
	public boolean equals(Object obj) {
		if (obj == null) return false;
		if (!(obj instanceof $1)) return false;
		if (obj == this) return true;
		$1 a = this;
		$1 b = ($1)obj;
		return a.x == b.x && a.y == b.y && a.z == b.z;
	}
	public int compareTo($1 that) {
		$1 a = this;
		$1 b = that;
		return (int)((a.x == b.x) ? a.y - b.y : a.x - b.x);
	}
}
endsnippet

snippet equals "A skeleton for equals function" b
public boolean equals(Object obj) {
	if (obj == null) return false;
	if (!(obj instanceof ${1:ClassType})) return false;
	if (obj == this) return true;
	$1 a = this;
	$1 b = ($1)obj;
	return ${0:/* compare properties here */}
}
endsnippet

snippet nextpermuation "Generate next permuation" b
private static boolean nextPermuation(${1:int}[] nums) {
	if (nums.length == 0) return false;
	int i = nums.length - 1;
	while (i > 0) {
		if (nums[i - 1] < nums[i]) break;
		i--;
	}
	if (i <= 0) {
		for (int j = 0; j < nums.length / 2; j++) {
			$1 t = nums[j];
			nums[j] = nums[nums.length - j - 1];
			nums[nums.length - j - 1] = t;
		}
		return false;
	}
	int j = nums.length - 1;
	while (nums[j] <= nums[i - 1] && j >= i) j--;
	$1 t = nums[j];
	nums[j] = nums[i - 1];
	nums[i - 1] = t;
	Arrays.sort(nums, i, nums.length);
	return true;
}
endsnippet

snippet nextsubset "Generate next subset from binary respresentation" b
private static int nextSubset(int comb) {
	int x = comb & -comb, y = comb + x;
	return ((comb & ~y) / x >> 1) | y;
}
endsnippet

snippet kmp "KMP string search" b
private static int[] kmpNext(char[] str) {
	int[] next = new int[str.length];
	next[0] = -1;
	int j = 0;
	int k = -1;
	while (j < str.length - 1) {
		if (k < 0 || str[j] == str[k]) {
			next[++j] = ++k;
		} else {
			k = next[k];
		}
	}
	return next;
}
endsnippet

snippet swap "Swap two items in an array" b
private static void swap(${1:int}[] array, int a, int b) {
	$1 tmp = array[a];
	array[a] = array[b];
	array[b] = tmp;
}
endsnippet

snippet reverse "Reverse items in an array" b
private static void reverse(${1:int}[] array, int l, int r) {
	int len = r - l + 1;
	for (int i = l; i < l + len / 2; i++) {
		swap(array, i, r + l - i);
	}
}
endsnippet

snippet makecombs "Make combination numbers" b
static private long MOD = 1000000007;
static private long[][] combs = new long[${1:100}][$1];
private static long pow(long a, long b) {
	long r = 1;
	while (b > 0) {
		if ((b & 1) == 1) r = (r * a) % MOD;
		a = (a * a) % MOD;
		b >>= 1;
	}
	return r;
}
private static void makeCombs() {
	long[] minverse = new long[$1];
	for (int i = 1; i < $1; i++) {
		minverse[i] = pow(i, MOD - 2);
	}
	for (int n = 0; n < $1; n++) {
		combs[n][0] = 1;
		int mid = n / 2;
		for (int m = 1; m <= mid; m++) {
			combs[n][m] = ((combs[n][m - 1] * minverse[m]) % MOD * (n - m + 1)) % MOD;
		}
		for (int m = mid + 1; m <= n; m++) {
			combs[n][m] = combs[n][n - m];
		}
	}
}
endsnippet

snippet nf "Network flow" b
class NetworkFlow {
	private static class NFEdge {
		int v;
		int rev;
		int cap;
		public NFEdge(int v, int rev, int cap) { 
			this.v = v;
			this.rev = rev;
			this.cap = cap;
		}
	}
	private int[] level;
	private int[] iter;
	private List<List<NFEdge>> graph;
	public NetworkFlow(int N) { 
		level = new int[N];
		iter = new int[N];
		graph = new ArrayList<List<NFEdge>>(N);
		for (int i = 0; i < N; i++) graph.add(new ArrayList<NFEdge>());
	}
	private void bfs(int s) {
		Arrays.fill(level, -1);
		Queue<Integer> que = new LinkedList<Integer>();
		level[s] = 0;
		que.add(s);
		while(!que.isEmpty()) {
			int v = que.poll();
			for (NFEdge e: graph.get(v)) {
				if (e.cap > 0 && level[e.v] < 0) {
					level[e.v] = level[v] + 1;
					que.add(e.v);
				}
			}
		}
	}
	private int dfs(int u, int t, int cap) {
		if (u == t) return cap;
		List<NFEdge> neighbors = graph.get(u);
		for (; iter[u] < neighbors.size(); iter[u]++) {
			NFEdge e = neighbors.get(iter[u]);
			if (e.cap > 0 && level[u] < level[e.v]) {
				int mcap = dfs(e.v, t, Math.min(cap, e.cap));
				if (mcap > 0) {
					e.cap -= mcap;
					graph.get(e.v).get(e.rev).cap += mcap;
					return mcap;
				}
			}
		}
		return 0;
	}
	public int maxFlow(int start, int target) {
		int flow = 0;
		while (true) {
			bfs(start);
			if (level[target] < 0) return flow;
			Arrays.fill(iter, 0);
			int mcap;
			while ((mcap = dfs(start, target, Integer.MAX_VALUE)) > 0) {
				flow += mcap;
			} 
		}
	}
	public void addEdge(int u, int v, int cap) {
		graph.get(u).add(new NFEdge(v, graph.get(v).size(), cap));
		graph.get(v).add(new NFEdge(u, graph.get(u).size() - 1, 0));
	}
}
endsnippet

snippet bm "Bipartite Matching" b
class BipartiteMatching {
	int[] match;
	boolean[] used;
	List<List<Integer>> graph;
	public BipartiteMatching(int N) { 
		match = new int[N];
		used = new boolean[N];
		graph = new ArrayList<List<Integer>>(N);
		for (int i = 0; i < N; i++) graph.add(new ArrayList<Integer>());
	}
	public void addEdge(int u, int v) {
		graph.get(u).add(v);
		graph.get(v).add(u);
	}
	private boolean dfs(int u) {
		used[u] = true;
		for (int v: graph.get(u)) {
			int w = match[v];
			if (w < 0 || !used[w] && dfs(w)) {
				match[u] = v;
				match[v] = u;
				return true;
			}
		}
		return false;
	}
	public int maxMatch() {
		int m = 0;
		Arrays.fill(match, -1);
		for (int i = 0; i < match.length; i++) {
			if (match[i] < 0) {
				Arrays.fill(used, false);
				if (dfs(i)) m++;
			}
		}
		return m;
	}
}
endsnippet

snippet spfa "Sparse Path Fast Algorithm" b
private void spfa(int s, List<List<Edge>> graph) {
	Arrays.fill(dist, Integer.MAX_VALUE);

	dist[s] = 0;
	Queue<Integer> que = new LinkedList<Integer>();
	que.add(s);
	flag[s] = true;

	while (!que.isEmpty()) {
		int u = que.poll();
		flag[u] = false;

		for (Edge e : graph.get(u)) {
			if (dist[e.v] > dist[e.u] + e.cost) {
				dist[e.v] = dist[e.u] + e.cost;
				prevv[e.v] = e.u;
				preve[e.v] = e;
				if (!flag[e.v]) {
					que.add(e.v);
					flag[e.v] = true;
				}
			}
		}
	}
}
endsnippet

snippet mcnf "Minimum Cost NetworkFlow" b
class Edge {
	int u;
	int v;
	int cap;
	int cost;
	Edge rev;

	public Edge(int u, int v, int cap, int cost) {
		this.u = u;
		this.v = v;
		this.cap = cap;
		this.cost = cost;
	}
}

class MinimumCostNF {
	int N;
	int[] dist;
	int[] prevv;
	boolean[] flag;
	Edge[] preve;
	ArrayList<List<Edge>> graph;

	public MinimumCostNF(int N) { 
		this.N = N;
		dist = new int[N];
		prevv = new int[N];
		flag = new boolean[N];
		preve = new Edge[N];
		graph = new ArrayList<List<Edge>>(N);
		for (int i = 0; i < N; i++) {
			graph.add(new ArrayList<Edge>());
		}
	}

	private void spfa(int s) {
		Arrays.fill(dist, Integer.MAX_VALUE);

		dist[s] = 0;
		Queue<Integer> que = new LinkedList<Integer>();
		que.add(s);
		flag[s] = true;

		while (!que.isEmpty()) {
			int u = que.poll();
			flag[u] = false;

			for (Edge e : graph.get(u)) {
				if (dist[e.u] < Integer.MAX_VALUE && e.cap > 0 && dist[e.v] > dist[e.u] + e.cost) {
					dist[e.v] = dist[e.u] + e.cost;
					prevv[e.v] = e.u;
					preve[e.v] = e;
					if (!flag[e.v]) {
						que.add(e.v);
						flag[e.v] = true;
					}
				}
			}
		}
	}

	public void addEdge(int u, int v, int cap, int cost) {
		Edge a = new Edge(u, v, cap, cost);
		Edge b = new Edge(v, u, 0, -cost);
		a.rev = b;
		b.rev = a;

		graph.get(u).add(a);
		graph.get(v).add(b);
	}

	public int minCostFlow(int s, int t) {
		int min = 0;
		int res = 0;

		while(true) {
			spfa(s);

			if (dist[t] == Integer.MAX_VALUE) break;

			int d = Integer.MAX_VALUE;
			for (int v = t; v != s; v = prevv[v]) {
				d = Math.min(preve[v].cap, d);
			}

			res += dist[t] * d;
			min = Math.min(min, res);

			for (int v = t; v != s; v = prevv[v]) {
				preve[v].cap -= 1;
				preve[v].rev.cap += 1;
			}
		}
		return min;
	}

	public int minCostOfFlow(int s, int t, int flow) {
		int res = 0;

		while(flow > 0) {
			spfa(s);

			if (dist[t] == Integer.MAX_VALUE) {
				return Integer.MAX_VALUE;
			}

			int d = flow;
			for (int v = t; v != s; v = prevv[v]) {
				d = Math.min(preve[v].cap, d);
			}

			res += dist[t] * d;
			flow -= d;

			for (int v = t; v != s; v = prevv[v]) {
				preve[v].cap -= d;
				preve[v].rev.cap += d;
			}
		}

		return res;
	}
}
endsnippet


snippet mulmat "Matrix multification" b
private static void mulMat(long[][] A, long[][] B, long[][] C) {
	int M = A.length;
	int N = B.length;
	int L = B[0].length;
	for (int i = 0; i < M; i++) {
		for (int j = 0; j < L; j++) {
			C[i][j] = 0;
			for (int k = 0; k < N; k++) {
				C[i][j] = (C[i][j] + A[i][k] * B[k][j]) % MOD;
			}
		}
	}
}
endsnippet

snippet powmat "Matrix fast power" b
private static void mulMat(long[][] A, long[][] B, long[][] C) {
	int M = A.length;
	int N = B.length;
	int L = B[0].length;
	for (int i = 0; i < M; i++) {
		for (int j = 0; j < L; j++) {
			C[i][j] = 0;
			for (int k = 0; k < N; k++) {
				C[i][j] = (C[i][j] + A[i][k] * B[k][j]) % MOD;
			}
		}
	}
}

private static long[][] powMat(long[][] A, long n) {
	// A, B, C must be square matrix.
	long[][] B = new long[A.length][A.length];
	long[][] C = new long[A.length][B.length];
	long[][] tmp;
	// C will be initialized as identity matrix
	for (int i = 0; i < C.length; i++) {
		C[i][i] = 1;
	}

	while (n > 0) {
		if ((n & 1) == 1) {
			mulMat(C, A, B);

			// Exchange C and B
			tmp = C;
			C = B;
			B = tmp;
		}

		n >>= 1;
		mulMat(A, A, B);

		// Exchange A and B
		tmp = A;
		A = B;
		B = tmp;
	}

	return C;
}
endsnippet

snippet sam "Suffix automaton"
class SAM {
	static class State {
		int max_len;
		int min_len;
		State suffix_link;
		State[] transitions;
		State(int size, int max_len, int min_len, State suffix_link, State[] transitions) {
			this.max_len = max_len;
			this.min_len = min_len;
			this.suffix_link = suffix_link;
			this.transitions = new State[size];
			if (transitions != null) {
				for (int i = 0; i < size && i < transitions.length; i++) {
					this.transitions[i] = transitions[i];
				}
			}
		}
	}

	private int size = ${1:30};
	private int length = 0;
	private State[] states;

	public SAM(String str) {
		this.states = new State[(str.length() << 1) + 5];

		this.states[length++] = new State(this.size, 0, 0, null, null);

		for (int i = 0; i < str.length(); i++) {
			int ch = charPointAt(str, i);
			add(ch);
		}
	}

	public void add(int ch) {
		State last = this.states[length-1];
		State next = new State(this.size, last.max_len + 1, 1, null, null);

		while (last != null && last.transitions[ch] == null) {
			last.transitions[ch] = next;
			last = last.suffix_link;
		}

		if (last == null) {
			next.min_len = 1;
			next.suffix_link = this.states[0];
			this.states[length++] = next;
			return;
		}

		State lastNext = last.transitions[ch];
		if (lastNext.max_len == last.max_len + 1) {
			next.min_len = lastNext.max_len + 1;
			next.suffix_link = lastNext;
			this.states[length++] = next;
			return;
		}

		State splitLastNext = new State(this.size, last.max_len + 1, 1, lastNext.suffix_link, lastNext.transitions);
		lastNext.min_len = splitLastNext.max_len + 1;
		lastNext.suffix_link = splitLastNext;

		next.min_len = splitLastNext.max_len + 1;
		next.suffix_link = splitLastNext;

		while (last != null && last.transitions[ch] == lastNext) {
			last.transitions[ch] = splitLastNext;
			last = last.suffix_link;
		}

		splitLastNext.min_len = splitLastNext.suffix_link.max_len + 1;

		this.states[length++] = splitLastNext;
		this.states[length++] = next;
	}

	private int charPointAt(String str, int i) {
		char ch = str.charAt(i);
		return ch - 'a';$0
	}
}
endsnippet

# vim:ft=snippets:
